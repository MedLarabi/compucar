Based on your request, I will craft a detailed prompt for Cursor AI. This prompt will outline the entire process, from the architectural design using AWS services to the specific code implementation for your e-commerce platform.

The prompt is structured to be comprehensive and actionable, guiding Cursor AI through each step of the project. It includes:
* **A clear problem statement:** What needs to be built.
* **High-level architecture:** A diagram and explanation of how the AWS services will work together.
* **Specific tasks:** A breakdown of the work into manageable, logical steps.
* **Security best practices:** Instructions on how to protect your video content.
* **Code-related instructions:** Guidance for building the front-end and back-end logic.

---

### **Cursor AI Prompt: E-commerce Video Course & Digital Product Extension**

**Project Goal:** Extend an existing e-commerce website's customer dashboard to include a "My Courses" section, offering secure video courses alongside existing file downloads. The system must automatically grant course access upon order confirmation and support manual assignment by an administrator. Video content will be securely hosted on AWS using S3 and delivered via CloudFront.

---

### **Part 1: Architectural Design & AWS Setup**

**1. AWS Architecture Overview:**
* **Amazon S3:** The origin for all video files. Videos will be stored in a private S3 bucket.
* **Amazon CloudFront:** The Content Delivery Network (CDN) that will deliver the videos to customers with low latency. It will be configured to serve content from the private S3 bucket.
* **Origin Access Control (OAC):** This will be used to secure the connection between CloudFront and the S3 bucket, preventing direct access to the video files via their S3 URL.
* **Signed URLs or Signed Cookies:** Implement a mechanism to generate temporary, secure URLs for video playback. This is crucial for restricting access to only authenticated and authorized users. Signed URLs are the simplest for this use case, as each video playback request will require a valid, temporary URL generated by our application's back-end.

**2. AWS Services Configuration Tasks:**
* **S3 Bucket Creation:** Create a new S3 bucket (e.g., `your-store-video-courses-private`) and ensure its public access is blocked.
* **CloudFront Distribution Setup:**
    * Create a new CloudFront distribution.
    * Set the S3 bucket as the origin.
    * Enable **Origin Access Control (OAC)** to secure the connection to S3.
    * Enable **"Restrict viewer access"** and choose **"Trusted key groups"**. This will allow us to use signed URLs for content delivery.
    * Configure a cache policy and origin request policy optimized for video streaming (e.g., allow `range` headers for seek functionality, forward all headers).
* **SSL/TLS Certificate:** Use AWS Certificate Manager (ACM) to provision an SSL/TLS certificate for your custom domain (e.g., `videos.yourstore.com`) and associate it with the CloudFront distribution.
* **CloudFront Key Pair Management:**
    * Generate a new CloudFront key pair (private key and public key) for creating signed URLs. Store the private key securely, possibly in AWS Secrets Manager or an environment variable.
    * Create a CloudFront key group and associate the public key with it.
    * Update the CloudFront distribution's "Trusted signers" to use this key group.

---

### **Part 2: Back-End Implementation (E-commerce Platform)**

**1. Database Schema Updates:**
* **`products` table:** Add a field `is_video_course` (boolean) to distinguish video courses from other digital products.
* **`courses` table:** Create a new table to store video course metadata.
    * `id` (primary key)
    * `product_id` (foreign key to `products`)
    * `title`
    * `description`
    * `created_at`, `updated_at`
* **`course_modules` table:** A table to hold the course structure.
    * `id` (primary key)
    * `course_id` (foreign key to `courses`)
    * `title`
    * `order`
* **`course_videos` table:** A table to store individual video details.
    * `id` (primary key)
    * `module_id` (foreign key to `course_modules`)
    * `title`
    * `s3_key` (The path to the video file in the S3 bucket, e.g., `course_1/module_1/intro.mp4`)
    * `order`
* **`customer_access` table:** A pivot table to manage which customers have access to which courses.
    * `customer_id` (foreign key to `customers`)
    * `course_id` (foreign key to `courses`)
    * `granted_at`
    * `source` (e.g., 'order_confirmation', 'manual_assignment')

**2. Back-End Logic Development:**
* **Order Confirmation Webhook/Event:**
    * Create an event listener or webhook handler that is triggered upon a successful order confirmation.
    * The handler will check each product in the order. If a product has `is_video_course` set to true, it will retrieve the corresponding `course_id` from the `courses` table.
    * It will then create a new record in the `customer_access` table for the customer and the purchased course.
* **Manual Assignment API Endpoint:**
    * Create an API endpoint for an admin to manually grant or revoke access to a course for a specific customer. This endpoint will be used by the admin dashboard.
    * The endpoint should validate the admin user and update the `customer_access` table accordingly.
* **Course & Video Access API:**
    * Create an authenticated API endpoint (e.g., `/api/courses/{course_id}`). This endpoint will:
        * Verify the logged-in user's identity.
        * Check the `customer_access` table to confirm the user has permission for the requested `course_id`.
        * If access is granted, retrieve all `course_modules` and `course_videos` for that course.
        * For each video, use the CloudFront private key to generate a secure, time-limited **Signed URL** for its corresponding `s3_key`.
        * Return the course structure and the generated Signed URLs to the front-end. **Important:** Do not expose the S3 keys directly; only the Signed URLs should be sent.

---

### **Part 3: Front-End Implementation (Customer Dashboard)**

**1. Front-End Development:**
* **"My Courses" Dashboard Page:**
    * Create a new page in the customer dashboard called "My Courses" (or similar).
    * This page will fetch the list of courses the customer has access to by calling the new back-end API.
    * The page will display the courses, potentially with a progress indicator for each.
* **Course Details Page:**
    * When a customer clicks on a course, they will be taken to a new page that displays the course structure (modules and videos).
    * The front-end will call the `/api/courses/{course_id}` endpoint to get the list of videos and their secure Signed URLs.
* **Video Player Component:**
    * Implement a video player component (e.g., using React, Vue, or a library like Video.js).
    * The video player will use the CloudFront Signed URL directly as the video source (`<video src="[SIGNED_URL]"></video>`).
    * The player will automatically handle video streaming, seeking, and playback.

### **Final Instructions for Cursor AI:**

* **Code Language:** Assume the existing e-commerce platform uses [Specify a language/framework, e.g., PHP/Laravel, Python/Django, Node.js/Express]. All new code should be compatible with this ecosystem.
* **Security:** Emphasize the importance of secure key management and ensuring that no S3 bucket URLs are ever exposed to the client-side. The entire video delivery system must rely on CloudFront Signed URLs.
* **Scalability:** The proposed architecture is highly scalable. The CloudFront CDN will handle the high traffic load for video streams, and the server-side logic for generating Signed URLs is lightweight.
* **Deliverables:**
    1.  A detailed explanation of the AWS setup steps.
    2.  The required database migration scripts.
    3.  Code snippets or a full implementation for the back-end logic (order confirmation listener, manual assignment API, and video access API).
    4.  Code for the front-end components (`My Courses` page, `Course Details` page, and the video player).
    5.  A summary of the overall solution and how it meets the project goals.