"use client";

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { Language } from '@/lib/constants/languages';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string, params?: Record<string, string | number>) => string;
  isLoading: boolean;
  isChangingLanguage: boolean;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

interface LanguageProviderProps {
  children: ReactNode;
}

export function LanguageProvider({ children }: LanguageProviderProps) {
  const [language, setLanguage] = useState<Language>('ar'); // Default to Arabic
  const [isLoading, setIsLoading] = useState(true);
  const [isChangingLanguage, setIsChangingLanguage] = useState(false);
  const [translations, setTranslations] = useState<Record<string, any>>({});
  const [hasMounted, setHasMounted] = useState(false);

  const fetchTranslations = async (lang: Language, isLanguageChange = false) => {
    try {
      // Only set loading to true on initial load or if no translations exist
      if (Object.keys(translations).length === 0) {
        setIsLoading(true);
      } else if (isLanguageChange) {
        setIsChangingLanguage(true);
      }
      
      const response = await fetch(`/api/locales/${lang}/common.json`);
      if (response.ok) {
        const data = await response.json();
        setTranslations(data);
        console.log(`‚úÖ Loaded translations for ${lang}:`, data);
      } else {
        console.warn(`‚ö†Ô∏è Failed to load translations for ${lang}:`, response.status);
      }
    } catch (error) {
      console.error(`‚ùå Error loading translations for ${lang}:`, error);
    } finally {
      // Add a small delay to prevent flickering on fast connections
      setTimeout(() => {
        setIsLoading(false);
        setIsChangingLanguage(false);
      }, 100);
    }
  };

  // Function to detect user's preferred language
  const detectUserLanguage = (): Language => {
    if (typeof window === 'undefined') {
      return 'ar'; // Default to Arabic on server
    }

    // Check if there's a saved language preference
    const savedLanguage = localStorage.getItem('language') as Language;
    if (savedLanguage && ['en', 'fr', 'ar'].includes(savedLanguage)) {
      console.log(`üîç Found saved language: ${savedLanguage}`);
      return savedLanguage;
    }

    // Detect browser language
    const browserLanguage = navigator.language || navigator.languages?.[0] || '';
    console.log(`üåê Browser language detected: ${browserLanguage}`);
    
    // Map browser language codes to our supported languages
    if (browserLanguage.startsWith('ar')) {
      console.log('‚úÖ Arabic language detected from browser');
      return 'ar';
    } else if (browserLanguage.startsWith('fr')) {
      console.log('‚úÖ French language detected from browser');
      return 'fr';
    } else if (browserLanguage.startsWith('en')) {
      console.log('‚úÖ English language detected from browser');
      return 'en';
    }

    // Check secondary languages from navigator.languages
    if (navigator.languages) {
      for (const lang of navigator.languages) {
        if (lang.startsWith('ar')) {
          console.log('‚úÖ Arabic found in secondary languages');
          return 'ar';
        } else if (lang.startsWith('fr')) {
          console.log('‚úÖ French found in secondary languages');
          return 'fr';
        } else if (lang.startsWith('en')) {
          console.log('‚úÖ English found in secondary languages');
          return 'en';
        }
      }
    }

    // Default to Arabic if no supported language is detected
    console.log('üîÑ No supported language detected, defaulting to Arabic');
    return 'ar';
  };

  useEffect(() => {
    setHasMounted(true);
    
    if (typeof window !== 'undefined') {
      const detectedLanguage = detectUserLanguage();
      console.log(`üéØ Setting initial language to: ${detectedLanguage}`);
      setLanguage(detectedLanguage);
      fetchTranslations(detectedLanguage);
    } else {
      // On server, default to Arabic
      console.log('üñ•Ô∏è Server-side: defaulting to Arabic');
      setLanguage('ar');
      fetchTranslations('ar');
    }
  }, []);

  // Fetch translations when language changes
  useEffect(() => {
    if (language) {
      const isLanguageChange = hasMounted && Object.keys(translations).length > 0;
      fetchTranslations(language, isLanguageChange);
    }
  }, [language]);

  useEffect(() => {
    // Only save to localStorage after component has mounted
    if (hasMounted && typeof window !== 'undefined') {
      localStorage.setItem('language', language);
    }
  }, [language, hasMounted]);

  // Multi-language fallback translations
  const getFallbackTranslation = (key: string): string => {
    const translations: Record<Language, Record<string, string>> = {
      en: {
        'navigation.categories': 'Categories',
        'checkout.cod.title': 'Cash on Delivery Checkout',
        'cart.title': 'Shopping Cart',
        'cart.empty': 'Cart is Empty',
        'cart.addProductsToStart': 'Add products to start shopping',
        'cart.continue': 'Continue Shopping',
        'search.placeholder': 'Search products...',
        'filters.sortBy': 'Sort by',
        'filters.newest': 'Newest',
        'filters.oldest': 'Oldest',
        'filters.priceLowHigh': 'Price: Low to High',
        'filters.priceHighLow': 'Price: High to Low',
        'filters.nameAZ': 'Name: A-Z',
        'filters.nameZA': 'Name: Z-A',
        'filters.highestRated': 'Highest Rated',
        'filters.priceRange': 'Price Range',
        'filters.apply': 'Apply',
        'categories.title': 'Product Categories',
        'categories.description': 'Browse our products by category',
        'categories.searchPlaceholder': 'Search categories...',
        'categories.viewProducts': 'View Products',
        'categories.subcategories': 'Subcategories',
        'categories.more': 'more',
        'categories.cantFind': "Can't find what you're looking for?",
        'categories.browseAllDescription': 'Browse all our products or use advanced search to find exactly what you need.',
        'categories.browseAllProducts': 'Browse All Products',
        'categories.advancedSearch': 'Advanced Search',
        'categories.failedToLoad': 'Failed to load categories',
        'categories.errorLoading': 'Error Loading Categories',
        'categories.noCategoriesFound': 'No Categories Found',
        'categories.organizingCategories': 'We are currently organizing our product categories.',
        'messages.premiumAutoParts': 'Premium automotive parts and accessories',
        'messages.discoverWideRange': 'Discover our wide range of automotive parts and accessories',
        'hero.title': 'Premium Auto Parts',
        'common.menu': 'Menu',
        'common.product': 'product',
        'common.products': 'products',
        'common.tryAgain': 'Try Again',
        'navigation.login': 'Login',
        'navigation.register': 'Register',
        'courses.loading': 'Loading courses...',
        'courses.loadingVideo': 'Loading video...',
        'courses.selectVideoToPlay': 'Select a video to play',
        'courses.videoFormatNotSupported': 'Video format not supported',
        'courses.videoRequiresEnrollment': 'This video requires enrollment',
        'courses.courseNotFound': 'Course not found',
        'courses.backToCourses': 'Back to Courses',
        'courses.previousVideo': 'Previous Video',
        'courses.nextVideo': 'Next Video',
        'courses.courseContent': 'Course Content',
        'courses.freeCourse': 'FREE COURSE',
        'courses.hasFreePreviews': 'HAS FREE PREVIEWS',
        'courses.freeModule': 'Free Preview Module',
        'courses.min': 'min',
        'courses.hours': 'hours',
        'courses.students': 'students',
        'courses.moduleCount': '{count} modules',
        'courses.videoCount': '{count} videos',
        'courses.enrollmentCount': '{count} students',
        'courses.videoOf': '{current} of {total}',
        'product.clearSelection': 'Clear Selection',
        'product.currentSelection': 'Current selection',
        'product.combinationNotAvailable': 'This combination is not available as a complete product',
        'product.tryDifferentOptions': 'Try selecting different options to find available combinations',
        'product.selectAllOptions': 'Please select all options to see the final price and availability.'
      },
      fr: {
        'navigation.categories': 'Cat√©gories',
        'checkout.cod.title': 'Commande contre remboursement',
        'cart.title': 'Panier',
        'cart.empty': 'Panier vide',
        'cart.addProductsToStart': 'Ajoutez des produits pour commencer vos achats',
        'cart.continue': 'Continuer les achats',
        'search.placeholder': 'Rechercher des produits...',
        'filters.sortBy': 'Trier par',
        'filters.newest': 'Plus r√©cent',
        'filters.oldest': 'Plus ancien',
        'filters.priceLowHigh': 'Prix: Croissant',
        'filters.priceHighLow': 'Prix: D√©croissant',
        'filters.nameAZ': 'Nom: A-Z',
        'filters.nameZA': 'Nom: Z-A',
        'filters.highestRated': 'Mieux not√©',
        'filters.priceRange': 'Gamme de prix',
        'filters.apply': 'Appliquer',
        'categories.title': 'Cat√©gories de produits',
        'categories.description': 'Parcourez nos produits par cat√©gorie',
        'categories.searchPlaceholder': 'Rechercher des cat√©gories...',
        'categories.viewProducts': 'Voir les produits',
        'categories.subcategories': 'Sous-cat√©gories',
        'categories.more': 'plus',
        'categories.cantFind': "Vous ne trouvez pas ce que vous cherchez?",
        'categories.browseAllDescription': 'Parcourez tous nos produits ou utilisez la recherche avanc√©e pour trouver exactement ce dont vous avez besoin.',
        'categories.browseAllProducts': 'Parcourir tous les produits',
        'categories.advancedSearch': 'Recherche avanc√©e',
        'categories.failedToLoad': '√âchec du chargement des cat√©gories',
        'categories.errorLoading': 'Erreur de chargement des cat√©gories',
        'categories.noCategoriesFound': 'Aucune cat√©gorie trouv√©e',
        'categories.organizingCategories': 'Nous organisons actuellement nos cat√©gories de produits.',
        'messages.premiumAutoParts': 'Pi√®ces et accessoires automobiles de qualit√©',
        'messages.discoverWideRange': 'D√©couvrez notre large gamme de pi√®ces et accessoires automobiles',
        'hero.title': 'Pi√®ces automobiles de qualit√©',
        'common.menu': 'Menu',
        'common.product': 'produit',
        'common.products': 'produits',
        'common.tryAgain': 'R√©essayer',
        'navigation.login': 'Connexion',
        'navigation.register': "S'inscrire",
        'courses.loading': 'Chargement des cours...',
        'courses.loadingVideo': 'Chargement de la vid√©o...',
        'courses.selectVideoToPlay': 'S√©lectionnez une vid√©o √† lire',
        'courses.videoFormatNotSupported': 'Format vid√©o non pris en charge',
        'courses.videoRequiresEnrollment': 'Cette vid√©o n√©cessite une inscription',
        'courses.courseNotFound': 'Cours non trouv√©',
        'courses.backToCourses': 'Retour aux Cours',
        'courses.previousVideo': 'Vid√©o Pr√©c√©dente',
        'courses.nextVideo': 'Vid√©o Suivante',
        'courses.courseContent': 'Contenu du Cours',
        'courses.freeCourse': 'COURS GRATUIT',
        'courses.hasFreePreviews': 'A DES APER√áUS GRATUITS',
        'courses.freeModule': 'Module d\'Aper√ßu Gratuit',
        'courses.min': 'min',
        'courses.hours': 'heures',
        'courses.students': '√©tudiants',
        'courses.moduleCount': '{count} modules',
        'courses.videoCount': '{count} vid√©os',
        'courses.enrollmentCount': '{count} √©tudiants',
        'courses.videoOf': '{current} sur {total}',
        'product.clearSelection': 'Effacer la s√©lection',
        'product.currentSelection': 'S√©lection actuelle',
        'product.combinationNotAvailable': 'Cette combinaison n\'est pas disponible en tant que produit complet',
        'product.tryDifferentOptions': 'Essayez de s√©lectionner diff√©rentes options pour trouver des combinaisons disponibles',
        'product.selectAllOptions': 'Veuillez s√©lectionner toutes les options pour voir le prix final et la disponibilit√©.'
      },
      ar: {
        'navigation.categories': 'ÿßŸÑŸÅÿ¶ÿßÿ™',
        'checkout.cod.title': 'ÿßŸÑÿØŸÅÿπ ÿπŸÜÿØ ÿßŸÑÿßÿ≥ÿ™ŸÑÿßŸÖ',
        'cart.title': 'ÿ≥ŸÑÿ© ÿßŸÑÿ™ÿ≥ŸàŸÇ',
        'cart.empty': 'ÿßŸÑÿ≥ŸÑÿ© ŸÅÿßÿ±ÿ∫ÿ©',
        'cart.addProductsToStart': 'ÿ£ÿ∂ŸÅ ŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÑÿ®ÿØÿ° ÿßŸÑÿ™ÿ≥ŸàŸÇ',
        'cart.continue': 'ŸÖÿ™ÿßÿ®ÿπÿ© ÿßŸÑÿ™ÿ≥ŸàŸÇ',
        'search.placeholder': 'ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™...',
        'filters.sortBy': 'ÿ™ÿ±ÿ™Ÿäÿ® ÿ≠ÿ≥ÿ®',
        'filters.newest': 'ÿßŸÑÿ£ÿ≠ÿØÿ´',
        'filters.oldest': 'ÿßŸÑÿ£ŸÇÿØŸÖ',
        'filters.priceLowHigh': 'ÿßŸÑÿ≥ÿπÿ±: ŸÖŸÜ ÿßŸÑÿ£ŸÇŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ£ÿπŸÑŸâ',
        'filters.priceHighLow': 'ÿßŸÑÿ≥ÿπÿ±: ŸÖŸÜ ÿßŸÑÿ£ÿπŸÑŸâ ÿ•ŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ',
        'filters.nameAZ': 'ÿßŸÑÿßÿ≥ŸÖ: ÿ£-Ÿä',
        'filters.nameZA': 'ÿßŸÑÿßÿ≥ŸÖ: Ÿä-ÿ£',
        'filters.highestRated': 'ÿßŸÑÿ£ÿπŸÑŸâ ÿ™ŸÇŸäŸäŸÖÿßŸã',
        'filters.priceRange': 'ŸÜÿ∑ÿßŸÇ ÿßŸÑÿ≥ÿπÿ±',
        'filters.apply': 'ÿ™ÿ∑ÿ®ŸäŸÇ',
        'categories.title': 'ŸÅÿ¶ÿßÿ™ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™',
        'categories.description': 'ÿ™ÿµŸÅÿ≠ ŸÖŸÜÿ™ÿ¨ÿßÿ™ŸÜÿß ÿ≠ÿ≥ÿ® ÿßŸÑŸÅÿ¶ÿ©',
        'categories.searchPlaceholder': 'ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿßŸÑŸÅÿ¶ÿßÿ™...',
        'categories.viewProducts': 'ÿπÿ±ÿ∂ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™',
        'categories.subcategories': 'ÿßŸÑŸÅÿ¶ÿßÿ™ ÿßŸÑŸÅÿ±ÿπŸäÿ©',
        'categories.more': 'ÿßŸÑŸÖÿ≤ŸäÿØ',
        'categories.cantFind': "ŸÑÿß ÿ™ÿ¨ÿØ ŸÖÿß ÿ™ÿ®ÿ≠ÿ´ ÿπŸÜŸáÿü",
        'categories.browseAllDescription': 'ÿ™ÿµŸÅÿ≠ ÿ¨ŸÖŸäÿπ ŸÖŸÜÿ™ÿ¨ÿßÿ™ŸÜÿß ÿ£Ÿà ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ ŸÑŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖÿß ÿ™ÿ≠ÿ™ÿßÿ¨Ÿá ÿ®ÿßŸÑÿ∂ÿ®ÿ∑.',
        'categories.browseAllProducts': 'ÿ™ÿµŸÅÿ≠ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™',
        'categories.advancedSearch': 'ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ',
        'categories.failedToLoad': 'ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÅÿ¶ÿßÿ™',
        'categories.errorLoading': 'ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÅÿ¶ÿßÿ™',
        'categories.noCategoriesFound': 'ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÅÿ¶ÿßÿ™',
        'categories.organizingCategories': 'ŸÜÿ≠ŸÜ ŸÜŸÇŸàŸÖ ÿ≠ÿßŸÑŸäÿßŸã ÿ®ÿ™ŸÜÿ∏ŸäŸÖ ŸÅÿ¶ÿßÿ™ ŸÖŸÜÿ™ÿ¨ÿßÿ™ŸÜÿß.',
        'messages.premiumAutoParts': 'ŸÇÿ∑ÿπ ÿ∫Ÿäÿßÿ± Ÿàÿ•ŸÉÿ≥ÿ≥Ÿàÿßÿ±ÿßÿ™ ÿ≥Ÿäÿßÿ±ÿßÿ™ ÿπÿßŸÑŸäÿ© ÿßŸÑÿ¨ŸàÿØÿ©',
        'messages.discoverWideRange': 'ÿßŸÉÿ™ÿ¥ŸÅ ŸÖÿ¨ŸÖŸàÿπÿ™ŸÜÿß ÿßŸÑŸàÿßÿ≥ÿπÿ© ŸÖŸÜ ŸÇÿ∑ÿπ ÿ∫Ÿäÿßÿ± Ÿàÿ•ŸÉÿ≥ÿ≥Ÿàÿßÿ±ÿßÿ™ ÿßŸÑÿ≥Ÿäÿßÿ±ÿßÿ™',
        'hero.title': 'ŸÇÿ∑ÿπ ÿ∫Ÿäÿßÿ± ÿ≥Ÿäÿßÿ±ÿßÿ™ ÿπÿßŸÑŸäÿ© ÿßŸÑÿ¨ŸàÿØÿ©',
        'common.menu': 'ÿßŸÑŸÇÿßÿ¶ŸÖÿ©',
        'common.product': 'ŸÖŸÜÿ™ÿ¨',
        'common.products': 'ŸÖŸÜÿ™ÿ¨ÿßÿ™',
        'common.tryAgain': 'ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ',
        'navigation.login': 'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ',
        'navigation.register': 'ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®',
        'courses.loading': 'ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿØŸàÿ±ÿßÿ™...',
        'courses.loadingVideo': 'ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÅŸäÿØŸäŸà...',
        'courses.selectVideoToPlay': 'ÿßÿÆÿ™ÿ± ŸÅŸäÿØŸäŸà ŸÑŸÑÿ™ÿ¥ÿ∫ŸäŸÑ',
        'courses.videoFormatNotSupported': 'ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑŸÅŸäÿØŸäŸà ÿ∫Ÿäÿ± ŸÖÿØÿπŸàŸÖ',
        'courses.videoRequiresEnrollment': 'Ÿáÿ∞ÿß ÿßŸÑŸÅŸäÿØŸäŸà Ÿäÿ™ÿ∑ŸÑÿ® ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ',
        'courses.courseNotFound': 'ÿßŸÑÿØŸàÿ±ÿ© ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØÿ©',
        'courses.backToCourses': 'ÿßŸÑÿπŸàÿØÿ© ÿ•ŸÑŸâ ÿßŸÑÿØŸàÿ±ÿßÿ™',
        'courses.previousVideo': 'ÿßŸÑŸÅŸäÿØŸäŸà ÿßŸÑÿ≥ÿßÿ®ŸÇ',
        'courses.nextVideo': 'ÿßŸÑŸÅŸäÿØŸäŸà ÿßŸÑÿ™ÿßŸÑŸä',
        'courses.courseContent': 'ŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿØŸàÿ±ÿ©',
        'courses.freeCourse': 'ÿØŸàÿ±ÿ© ŸÖÿ¨ÿßŸÜŸäÿ©',
        'courses.hasFreePreviews': 'ŸÑÿØŸäŸáÿß ŸÖÿπÿßŸäŸÜÿßÿ™ ŸÖÿ¨ÿßŸÜŸäÿ©',
        'courses.freeModule': 'Ÿàÿ≠ÿØÿ© ŸÖÿπÿßŸäŸÜÿ© ŸÖÿ¨ÿßŸÜŸäÿ©',
        'courses.min': 'ÿØŸÇŸäŸÇÿ©',
        'courses.hours': 'ÿ≥ÿßÿπÿßÿ™',
        'courses.students': 'ÿ∑ŸÑÿßÿ®',
        'courses.moduleCount': '{count} Ÿàÿ≠ÿØÿßÿ™',
        'courses.videoCount': '{count} ŸÅŸäÿØŸäŸàŸáÿßÿ™',
        'courses.enrollmentCount': '{count} ÿ∑ŸÑÿßÿ®',
        'courses.videoOf': '{current} ŸÖŸÜ {total}',
        'product.clearSelection': 'ŸÖÿ≥ÿ≠ ÿßŸÑÿ™ÿ≠ÿØŸäÿØ',
        'product.currentSelection': 'ÿßŸÑÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ≠ÿßŸÑŸä',
        'product.combinationNotAvailable': 'Ÿáÿ∞Ÿá ÿßŸÑÿ™ÿ±ŸÉŸäÿ®ÿ© ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±ÿ© ŸÉŸÖŸÜÿ™ÿ¨ ŸÉÿßŸÖŸÑ',
        'product.tryDifferentOptions': 'ÿ¨ÿ±ÿ® ÿßÿÆÿ™Ÿäÿßÿ± ÿÆŸäÿßÿ±ÿßÿ™ ŸÖÿÆÿ™ŸÑŸÅÿ© ŸÑŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ™ÿ±ŸÉŸäÿ®ÿßÿ™ ŸÖÿ™ÿßÿ≠ÿ©',
        'product.selectAllOptions': 'Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≠ÿØŸäÿØ ÿ¨ŸÖŸäÿπ ÿßŸÑÿÆŸäÿßÿ±ÿßÿ™ ŸÑÿ±ÿ§Ÿäÿ© ÿßŸÑÿ≥ÿπÿ± ÿßŸÑŸÜŸáÿßÿ¶Ÿä ŸàÿßŸÑÿ™ŸàŸÅÿ±.'
      }
    };

    const languageTranslations = translations[language] || translations.en;
    return languageTranslations[key] || key;
  };

  const t = (key: string, params?: Record<string, string | number>): string => {
    // Try to get from loaded translations first
    if (translations && Object.keys(translations).length > 0) {
      const translation = getNestedTranslation(translations, key);
      if (translation && translation !== key) {
        let result = translation;
        if (params) {
          Object.entries(params).forEach(([param, value]) => {
            result = result.replace(`{${param}}`, String(value));
          });
        }
        return result;
      } else {
        console.warn(`üîç Translation missing for key "${key}" in language "${language}"`);
      }
    } else {
      // If translations are still loading, return empty string to prevent flash
      if (isLoading) {
        return '';
      }
      console.warn(`‚ö†Ô∏è No translations loaded yet for language "${language}"`);
    }

    // Use fallback if no translations loaded or translation missing
    return getFallbackTranslation(key);
  };

  // Helper function to get nested translations (e.g., "navigation.categories")
  const getNestedTranslation = (obj: any, path: string): string | null => {
    return path.split('.').reduce((current, key) => {
      return current && current[key] !== undefined ? current[key] : null;
    }, obj);
  };

  const value: LanguageContextType = {
    language,
    setLanguage,
    t,
    isLoading,
    isChangingLanguage,
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage(): LanguageContextType {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    return {
      language: 'en',
      setLanguage: () => {},
      t: (key: string) => key,
      isLoading: false,
      isChangingLanguage: false,
    };
  }
  return context;
}
