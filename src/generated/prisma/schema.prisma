// CompuCar E-commerce Database Schema
// This is your Prisma schema file for the CompuCar e-commerce platform
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// User Management Models
// ============================================================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  name          String? // For display purposes
  password      String? // For credentials authentication
  phone         String?
  image         String?
  emailVerified DateTime?
  isActive      Boolean   @default(true)
  role          UserRole  @default(CUSTOMER)
  newsletter    Boolean   @default(false)
  marketing     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  accounts  Account[]
  sessions  Session[]
  addresses Address[]
  orders    Order[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String      @default("US")
  phone      String?
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

// ============================================================================
// Product Catalog Models
// ============================================================================

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id               String        @id @default(cuid())
  name             String
  slug             String        @unique
  description      String
  shortDescription String?
  price            Decimal       @db.Decimal(10, 2)
  compareAtPrice   Decimal?      @db.Decimal(10, 2)
  cost             Decimal?      @db.Decimal(10, 2)
  sku              String        @unique
  barcode          String?
  trackQuantity    Boolean       @default(true)
  quantity         Int           @default(0)
  allowBackorder   Boolean       @default(false)
  categoryId       String
  brand            String?
  vendor           String?
  weight           Decimal?      @db.Decimal(8, 2)
  length           Decimal?      @db.Decimal(8, 2)
  width            Decimal?      @db.Decimal(8, 2)
  height           Decimal?      @db.Decimal(8, 2)
  status           ProductStatus @default(DRAFT)
  isActive         Boolean       @default(true)
  isFeatured       Boolean       @default(false)
  metaTitle        String?
  metaDescription  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  publishedAt      DateTime?

  // Relations
  category   Category         @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  variants   ProductVariant[]
  tags       ProductTag[]
  reviews    ProductReview[]
  orderItems OrderItem[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int     @default(0)
  isMain    Boolean @default(false)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id             String   @id @default(cuid())
  productId      String
  name           String
  sku            String   @unique
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)
  quantity       Int      @default(0)
  image          String?
  options        Json     @default("{}")
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductTag {
  id        String @id @default(cuid())
  productId String
  name      String

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name])
  @@map("product_tags")
}

model ProductReview {
  id         String   @id @default(cuid())
  productId  String
  userId     String?
  name       String
  email      String
  rating     Int
  title      String?
  content    String
  isVerified Boolean  @default(false)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
}

// ============================================================================
// Order Management Models
// ============================================================================

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String
  status            OrderStatus @default(PENDING)
  subtotal          Decimal     @db.Decimal(10, 2)
  shipping          Decimal     @default(0) @db.Decimal(10, 2)
  tax               Decimal     @default(0) @db.Decimal(10, 2)
  discount          Decimal     @default(0) @db.Decimal(10, 2)
  total             Decimal     @db.Decimal(10, 2)
  shippingAddressId String?
  billingAddressId  String?
  shippingMethod    String
  trackingNumber    String?
  estimatedDelivery DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  customerNotes     String?
  adminNotes        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  name      String
  sku       String
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
  image     String?
  variant   String?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  gatewayId     String?
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  paidAt        DateTime?
  refundedAt    DateTime?
  refundAmount  Decimal?      @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// ============================================================================
// Enums
// ============================================================================

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}
